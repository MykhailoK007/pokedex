{"version":3,"sources":["Components/Cards/Cards.module.css","Components/CurrentPokemon/CurrentPokemon.module.css","API/api.js","service.js","redux/Card-reducer.js","Components/Cards/Cards.js","Components/CurrentPokemon/CurrentPokemon.js","Components/Cards/CardsContainer.js","App.js","redux/store.js","index.js"],"names":["module","exports","pokemonList","axios","baseURL","pokemonAPI","offset","get","then","response","data","name","changeName","charAt","toUpperCase","slice","initalState","pokemonAmount","currentPokemon","types","setPokemonAmount","type","getPokemonList","setOffset","cardReducer","state","action","map","element","pokemon","img","sprites","front_default","index","id","length","attack","stats","base_stat","defense","hp","spAttack","spDefense","speed","weight","totalMoves","moves","list","Cards","setCurrentPokemon","props","currentModeToggle","getCurrentPokemon","this","getPokemonsByName","className","classes","card","onClick","src","imgUrl","alt","key","React","Component","CurrentPokemon","currentCardWrapper","currentCard","avatar","table","CardsContainer","prev","setState","currentMode","currentType","getPokemonsThunk","getTypeList","containerWrapper","cardsWrapper","bind","loadButton","connect","cards","dispatch","count","results","App","path","reducers","combineReducers","store","createStore","applyMiddleware","thunkMiddleWare","ReactDOM","render","basename","process","document","getElementById"],"mappings":"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","file":"static/js/main.68dbedaa.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"containerWrapper\":\"Cards_containerWrapper__1pZGC\",\"cardsWrapper\":\"Cards_cardsWrapper__1x4iz\",\"card\":\"Cards_card__1ak5A\",\"loadButton\":\"Cards_loadButton__2c4Fs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"currentCardWrapper\":\"CurrentPokemon_currentCardWrapper__2HBH8\",\"currentCard\":\"CurrentPokemon_currentCard__3cJzi\",\"table\":\"CurrentPokemon_table__2L_fU\",\"avatar\":\"CurrentPokemon_avatar__3hQzI\"};","import * as axios from 'axios';\n\n\nconst pokemonList = axios.create({\n    baseURL:'http://pokeapi.co/api/v2/'\n});\n\n\n\nexport const pokemonAPI= {\n\n    getPokemonsList(offset) {\n\n\n       return  pokemonList.get(`pokemon/?limit=12&offset=${offset}`)\n            .then(response => {\n\n                return response.data\n            })\n\n    },\n    getPokemonByName(name){\n\n        return   pokemonList(`pokemon/${name}`)\n            .then(  response => {\n\n                return  response.data\n            })\n    },\n    getTypeList(){\n        return pokemonList.get('type?limit=999')\n            .then(response => {\n                return response.data\n            })\n    }\n\n}","\n\nexport const changeName = (name) => {\n    if(name)\n    return name.charAt(0).toUpperCase() + name.slice(1);\n}","import {pokemonAPI} from \"../API/api\";\nimport {changeName} from \"../service\";\n\nconst SET_POKEMON_AMOUNT = 'SET_POKEMON_AMOUNT';\nconst SET_POKEMON_BY_NAME = 'SET_POKEMON_BY_NAME';\nconst GET_POKEMON_LIST = 'GET_POKEMON_LIST';\nconst SET_OFFSET = 'SET_OFFSET';\nconst SET_CURRENT_POKEMON = \"SET_CURRENT_POKEMON\";\nconst SET_TYPES_LIST = \"SET_TYPES_LIST\";\n\n\nlet initalState = {\n        pokemonAmount:0,\n        pokemonList:[],\n        offset:0,\n        currentPokemon:{},\n        types:[]\n}\nfunction cardReducer(state = initalState, action){\n        switch(action.type) {\n                case SET_POKEMON_AMOUNT :\n                        return {\n                                ...state,\n                                pokemonAmount: action.pokemonAmount\n                        }\n                case GET_POKEMON_LIST:\n\n                        return {\n                                ...state,\n                                pokemonList:[ ...state.pokemonList,...action.pokemonList]\n                        }\n                case SET_POKEMON_BY_NAME: {\n\n                              return {\n                                  ...state,\n                                  pokemonList: state.pokemonList.map(element => {\n                                      if (element.name === action.pokemon.name) {\n                                          return {...element,\n                                              img: action.pokemon.sprites.front_default,\n                                              types: [action.pokemon.types.map((type, index) => {\n                                                  return `${changeName(type.type.name)} `\n\n                                              })]\n                                          }\n                                      }\n                                      return element\n                                  })\n\n                              }\n\n                }\n            case SET_OFFSET:{\n\n                return {\n                    ...state,\n                    offset: state.offset+12\n                }\n\n            }\n            case SET_CURRENT_POKEMON:{\n\n                return {\n                    ...state,\n                    currentPokemon: {\n                        id:action.pokemon.id,\n                        img: action.pokemon.sprites.front_default,\n                        types: [action.pokemon.types.map((type, index) => {\n                            if(index === action.pokemon.types.length-1) return changeName(type.type.name)\n                            return `${changeName(type.type.name)}, `\n                        })],\n                        attack: action.pokemon.stats[4].base_stat,\n                        defense: action.pokemon.stats[3].base_stat,\n                        hp: action.pokemon.stats[5].base_stat,\n                        spAttack:action.pokemon.stats[2].base_stat,\n                        spDefense:action.pokemon.stats[1].base_stat,\n                        speed:action.pokemon.stats[0].base_stat,\n                        weight:action.pokemon.weight,\n                        totalMoves:action.pokemon.moves.length,\n                        name: action.pokemon.name\n\n                    }\n\n                }\n            }\n            case SET_TYPES_LIST:{\n\n                return {\n                    ...state,\n                    types: action.list.map(type => {\n                        return {...type}\n                    })\n                }\n            }\n\n                default :\n                        return state;\n        }\n\n}\n\n\n\nexport const  setPokemonAmount = (pokemonAmount) => {\n        return {\n                type:SET_POKEMON_AMOUNT,\n                pokemonAmount\n        }\n}\nexport const getPokemonList = (pokemonList) => {\n\n        return {\n                type:GET_POKEMON_LIST,\n                pokemonList\n        }\n}\nexport const setPokemonByName = (pokemon) => {\n        return {\n                type:SET_POKEMON_BY_NAME,\n                pokemon\n        }\n}\nexport const setOffset = () => {\n    return {\n        type: SET_OFFSET\n    }\n}\nexport const setCurrentPokemon = (pokemon) => {\n    return {\n        type: SET_CURRENT_POKEMON,\n        pokemon\n    }\n}\nexport const setTypeList = (list) => {\n    return {\n        type: SET_TYPES_LIST,\n        list\n    }\n}\nexport  const getPokemonsThunk = (offset, type) => {\n        return   (dispatch) =>{\n       pokemonAPI.getPokemonsList(offset,type)\n            .then(data => {\n\n                        dispatch(setPokemonAmount(data.count))\n                        dispatch(getPokemonList(data.results))\n\n\n            })\n            dispatch(setOffset(offset))\n        }\n}\n\n\n\nexport const getPokemonsByName = name =>  {\n        return    dispatch => {\n\n           pokemonAPI.getPokemonByName(name)\n            .then(data => {\n                    dispatch(setPokemonByName(data));\n\n                    return data\n            })}\n}\nexport const getCurrentPokemon = name => dispatch => {\n        pokemonAPI.getPokemonByName(name)\n            .then(data =>{\n\n                dispatch(setCurrentPokemon(data))\n            })\n\n}\nexport const getTypeList = () => dispatch => {\n    pokemonAPI.getTypeList()\n        .then( data => {\n            dispatch(setTypeList(data.results))\n        })\n}\nexport  const setPokemonsThunkWithFilter = (offset, type) => {\n    return   (dispatch) =>{\n        pokemonAPI.getPokemonsList(offset,type)\n            .then(data => {\n                    dispatch(setPokemonAmount(data.pokemon.length))\n                    debugger\n                    dispatch(getPokemonList(data.pokemon.map(poke => {\n                        return {...poke}\n                    })))\n\n\n            })\n        dispatch(setOffset(offset))\n    }\n}\n\n\nexport default cardReducer;\n","import React from \"react\";\nimport classes from './Cards.module.css'\nimport {changeName} from \"../../service\";\n\n\n\nclass  Cards extends React.Component{\n    componentDidMount() {\n        this.props.getPokemonsByName(this.props.name)\n    }\n\n    setCurrentPokemon = () => {\n        this.props.currentModeToggle(this.props.name)\n        this.props.getCurrentPokemon(this.props.name);\n    }\n\n    render() {\n\n        if (this.props.types) {\n            return <div className={classes.card}>\n                <div onClick={this.setCurrentPokemon}>\n                    <img src={this.props.imgUrl} alt={this.props.name}/>\n                    <h3>{changeName(this.props.name)}</h3>\n                    <div>\n                        {\n                            (this.props.types)\n                            &&\n                            this.props.types.map(type => {\n                                return <div key = {type}>{type}</div>\n                            })\n                        }\n\n                    </div>\n                </div>\n\n            </div>\n        }\n        return <div></div>\n    }\n}\n\nexport default Cards;","import React from \"react\";\n\nimport classes from './CurrentPokemon.module.css'\nimport {changeName} from \"../../service\";\nconst CurrentPokemon = (props) => {\n\n            return(\n\n            <div className={classes.currentCardWrapper}>\n                <div className={classes.currentCard}>\n                    <div>\n                        <img src={props.img} alt={props.name}\n                             className={classes.avatar}/>\n                    </div>\n                    <h1>{`${changeName(props.name)} #${props.id}`}</h1>\n                    <table className={classes.table}>\n                        <tbody>\n                        <tr>\n                            <td>Type</td>\n                            <td>{props.types}</td>\n                        </tr>\n                        <tr>\n                            <td>Attack</td>\n                            <td>{props.attack}</td>\n                        </tr>\n                        <tr>\n                            <td>Defense</td>\n                            <td>{props.defense}</td>\n                        </tr>\n                        <tr>\n                            <td>HP</td>\n                            <td>{props.hp}</td>\n                        </tr>\n                        <tr>\n                            <td>Sp Attack</td>\n                            <td>{props.spAttack}</td>\n                        </tr>\n                        <tr>\n                            <td>SP Defense</td>\n                            <td>{props.spDefense}</td>\n                        </tr>\n                        <tr>\n                            <td>Speed</td>\n                            <td>{props.speed}</td>\n                        </tr>\n                        <tr>\n                            <td>Weight</td>\n                            <td>{props.weight}</td>\n                        </tr>\n                        <tr>\n                            <td>Total moves</td>\n                            <td>{props.totalMoves}</td>\n                        </tr>\n                        </tbody>\n\n                    </table>\n                </div>\n            </div>\n        )}\n\nexport default CurrentPokemon;","import React from \"react\";\nimport {connect} from \"react-redux\";\nimport {\n    getCurrentPokemon,\n    getPokemonsByName,\n    getPokemonsThunk,\n    getTypeList,\n    setOffset,\n\n} from \"../../redux/Card-reducer\";\nimport Cards from \"./Cards\";\nimport classes from './Cards.module.css'\nimport CurrentPokemon from \"../CurrentPokemon/CurrentPokemon\";\n\nclass  CardsContainer extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentMode: false,\n            currentType:'',\n            prev:''\n        }\n\n    }\n\n    componentDidMount() {\n        this.props.getPokemonsThunk(this.props.offset);\n        this.props.getTypeList();\n\n   }\n    setOffset = () => {\n        this.props.setOffset();\n\n    }\n    currentModeToggle = (name) => {\n\n        if(this.state.prev == name){\n            this.setState({currentMode: false})\n        }else{\n\n            this.setState({prev:name})\n            this.setState({currentMode: true})\n        }\n    }\n\n\n     render(){\n\n        return  (\n            <div className={classes.containerWrapper}>\n\n\n                    <div className={classes.cardsWrapper} >\n\n\n                        {\n                            this.props.pokemonList.map(element => {\n\n                                return <Cards key={element.name}\n                                              name = {element.name}\n                                              imgUrl = {element.img}\n                                              getPokemonsByName ={this.props.getPokemonsByName.bind(this)}\n                                              types = {element.types}\n                                              getCurrentPokemon = {this.props.getCurrentPokemon.bind(this)}\n                                              currentModeToggle = {this.currentModeToggle}\n                                />\n                            })\n                        }\n                        <div  className={classes.loadButton}>\n                            <button onClick={()=>{this.props.getPokemonsThunk(this.props.offset)}}\n\n                            >Load More</button>\n                        </div>\n                    </div>\n\n\n\n                {\n                    this.state.currentMode &&\n\n                    <CurrentPokemon\n                        id = {this.props.currentPokemon.id}\n                        name = {this.props.currentPokemon.name}\n                        img = {this.props.currentPokemon.img}\n                        types = {this.props.currentPokemon.types}\n                        attack = {this.props.currentPokemon.attack}\n                        defense = {this.props.currentPokemon.defense}\n                        hp = {this.props.currentPokemon.hp}\n                        spAttack = {this.props.currentPokemon.spAttack}\n                        spDefense = {this.props.currentPokemon.spDefense}\n                        speed =  {this.props.currentPokemon.speed}\n                        weight =  {this.props.currentPokemon.weight}\n                        totalMoves =  {this.props.currentPokemon.totalMoves}\n                    />\n\n                }\n\n            </div>\n        )\n    }\n}\n\nfunction mapStateToProps(state){\n    return {\n        pokemonAmount:state.cards.pokemonAmount,\n        pokemonList:state.cards.pokemonList,\n        offset:state.cards.offset,\n        currentPokemon: state.cards.currentPokemon,\n\n    }\n}\n\nexport default connect(mapStateToProps,{\n    getPokemonsThunk,\n    getPokemonsByName,\n    setOffset,\n    getCurrentPokemon,\n    getTypeList\n})(CardsContainer)","import React from 'react';\nimport './App.css';\nimport CardsContainer from \"./Components/Cards/CardsContainer\";\nimport {Route} from \"react-router\";\n\nfunction App() {\n\n  return (\n        <div>\n            <Route path='/home'>\n                <h1 className=\"header\">Pokedex</h1>\n                <CardsContainer/>\n            </Route>\n\n        </div>\n\n  );\n}\n\nexport default App;\n","import cardReducer from \"./Card-reducer\";\nimport {applyMiddleware, combineReducers, createStore} from \"redux\";\nimport thunkMiddleWare from \"redux-thunk\";\n\nlet reducers = combineReducers({\n            cards:cardReducer\n})\n\nlet store = createStore(reducers,applyMiddleware(thunkMiddleWare));\n\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from \"./redux/store\";\nimport {Provider} from \"react-redux\";\nimport {BrowserRouter} from \"react-router-dom\";\n\nReactDOM.render(<Provider store={store}>\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <App/>\n    </BrowserRouter>\n</Provider> ,document.getElementById('root'));\n\n"],"sourceRoot":""}